import os
import sys
import shutil
from PyPDF2 import PdfReader, PdfWriter
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

class MainWidget(QWidget):
    def __init__(self):
        super().__init__()
        
        main_label = QLabel("<b>PDF App </b>")
        main_label.setStyleSheet("Color : gray")
        main_label.setFont(QFont("", 28))

        hbox = QHBoxLayout()
        hbox.addStretch(1)
        hbox.addWidget(main_label)
        hbox.addStretch(1)

        description_label = QLabel("")
        description_label.setStyleSheet("Color : gray")
        description_label.setFont(QFont("", 14))
        description_label.setAlignment(Qt.AlignCenter)
        description_label.setWordWrap(True)

        hbox_desc = QHBoxLayout()
        hbox_desc.addStretch(1)
        hbox_desc.addWidget(description_label)
        hbox_desc.addStretch(1)

        vbox = QVBoxLayout()
        vbox.addStretch(1)
        vbox.addLayout(hbox)  
        vbox.addLayout(hbox_desc)  
        vbox.addStretch(4)

        self.setLayout(vbox)

class ListboxWidget2(QListWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.left_paths = {}  

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
            for url in event.mimeData().urls():
                left_path = url.toLocalFile() if url.isLocalFile() else url.toString()
                if left_path.lower().endswith('.pdf'):
                    file_name = os.path.basename(left_path)
                    self.addItems([file_name])
                    self.left_paths[file_name] = left_path  

    def get_selected_file_paths(self):
        selected_items = self.selectedItems()
        file_paths = [self.left_paths[item.text()] for item in selected_items] 
        return file_paths

class ListboxWidget3(QListWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.right_paths = {} 

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
            for url in event.mimeData().urls():
                right_path = url.toLocalFile() if url.isLocalFile() else url.toString()
                if right_path.lower().endswith('.pdf'):
                    file_name = os.path.basename(right_path)
                    self.addItems([file_name])
                    self.right_paths[file_name] = right_path  

    def get_selected_file_paths(self):
        selected_items = self.selectedItems()
        file_paths = [self.right_paths[item.text()] for item in selected_items]  
        return file_paths


class PDFManagement(QWidget):
    save_path = None

    def __init__(self):
        super().__init__()
        self.initUI()
        self.setAcceptDrops(True)
        self.last_selected_widget = None
        self.left_sort_ascending = True  
        self.right_sort_ascending = True 
        self.initial_save_path = None  

    def initUI(self):
        self.setupButtons()
        self.setupListboxes()
        self.setupConnections()
        self.selected_list_widget = None
        self.setAcceptDrops(True)

    def setupButtons(self):
        self.mergePDFButton = QPushButton("합치기", self)
        self.mergePDFButton.setGeometry(QRect(20, 440, 430, 62))

        self.groupBox = QGroupBox("<PDF 리스트>", self)
        self.groupBox.setGeometry(QRect(20, 20, 451, 410))

        self.addButton = QPushButton("추가", self.groupBox)
        self.addButton.setGeometry(QRect(20, 310, 80, 32))

        self.removeButton = QPushButton("제거", self.groupBox)
        self.removeButton.setGeometry(QRect(120, 310, 80, 32))

        self.add2Button = QPushButton("추가", self.groupBox)
        self.add2Button.setGeometry(QRect(250, 310, 80, 32))

        self.remove2Button = QPushButton("제거", self.groupBox)
        self.remove2Button.setGeometry(QRect(350, 310, 80, 32))
        
        self.sortLeftButton = QPushButton("이름 정렬", self)
        self.sortLeftButton.setGeometry(QRect(140, 27, 80, 25))

        self.sortRightButton = QPushButton("이름 정렬", self)
        self.sortRightButton.setGeometry(QRect(370, 27, 80, 25))
        
        self.upLeftButton = QPushButton("위로", self.groupBox)
        self.upLeftButton.setGeometry(QRect(20, 350, 80, 32))

        self.downLeftButton = QPushButton("아래로", self.groupBox)
        self.downLeftButton.setGeometry(QRect(120, 350, 80, 32))

        self.upRightButton = QPushButton("위로", self.groupBox)
        self.upRightButton.setGeometry(QRect(250, 350, 80, 32))

        self.downRightButton = QPushButton("아래로", self.groupBox)
        self.downRightButton.setGeometry(QRect(350, 350, 80, 32))


    def setupListboxes(self):
        self.leftListWidget = ListboxWidget2(self.groupBox)
        self.leftListWidget.setGeometry(QRect(20, 30, 180, 250))

        self.rightListWidget = ListboxWidget3(self.groupBox)
        self.rightListWidget.setGeometry(QRect(250, 30, 180, 250))

    def setupConnections(self):
        self.add2Button.clicked.connect(self.add_PDF_to_right)
        self.remove2Button.clicked.connect(self.del_PDF_from_right)
        self.addButton.clicked.connect(self.add_PDF_to_left)
        self.removeButton.clicked.connect(self.del_PDF_from_left)
        self.mergePDFButton.clicked.connect(self.merge_PDF)
        self.sortRightButton.clicked.connect(self.sort_right_PDF_by_name)
        self.sortLeftButton.clicked.connect(self.sort_left_PDF_by_name)
        self.upLeftButton.clicked.connect(self.move_item_up_left)
        self.downLeftButton.clicked.connect(self.move_item_down_left)
        self.upRightButton.clicked.connect(self.move_item_up_right)
        self.downRightButton.clicked.connect(self.move_item_down_right)


    def add_PDF_to_right(self):
        file_dialog = QFileDialog(self, "파일 열기", "", "PDF 파일(*.pdf)")
        file_dialog.setFileMode(QFileDialog.ExistingFiles)
        self.selected_list_widget = self.rightListWidget

        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            for file_path in selected_files:
                if not os.path.isdir(file_path):
                    file_name = os.path.basename(file_path)
                    self.rightListWidget.addItem(file_name)
                    self.rightListWidget.right_paths[file_name] = file_path

                   

    def del_PDF_from_right(self):
        selected_items = self.rightListWidget.selectedItems()
        for item in selected_items:
            self.rightListWidget.takeItem(self.rightListWidget.row(item))

    def add_PDF_to_left(self):
        file_dialog = QFileDialog(self, "파일 열기", "", "PDF 파일(*.pdf)")
        file_dialog.setFileMode(QFileDialog.ExistingFiles)
        self.selected_list_widget = self.leftListWidget

        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            for file_path in selected_files:
                if not os.path.isdir(file_path):
                    file_name = os.path.basename(file_path)
                    self.leftListWidget.addItem(file_name)
                    self.leftListWidget.left_paths[file_name] = file_path

    def del_PDF_from_left(self):
        selected_items = self.leftListWidget.selectedItems()
        for item in selected_items:
            self.leftListWidget.takeItem(self.leftListWidget.row(item))
    def move_item_up_left(self):
        selected_item = self.leftListWidget.currentItem()
        if selected_item:
            row = self.leftListWidget.row(selected_item)
            if row > 0:
                self.leftListWidget.takeItem(row)
                self.leftListWidget.insertItem(row - 1, selected_item)
                self.leftListWidget.setCurrentItem(selected_item)

    def move_item_down_left(self):
        selected_item = self.leftListWidget.currentItem()
        if selected_item:
            row = self.leftListWidget.row(selected_item)
            if row < self.leftListWidget.count() - 1:
                self.leftListWidget.takeItem(row)
                self.leftListWidget.insertItem(row + 1, selected_item)
                self.leftListWidget.setCurrentItem(selected_item)

    def move_item_up_right(self):
        selected_items = self.rightListWidget.selectedItems()
        for item in selected_items:
            row = self.rightListWidget.row(item)
            if row > 0:
                self.rightListWidget.takeItem(row)
                self.rightListWidget.insertItem(row - 1, item)
                self.rightListWidget.setCurrentItem(item)

    def move_item_down_right(self):
        selected_items = self.rightListWidget.selectedItems()
        for item in reversed(selected_items):
            row = self.rightListWidget.row(item)
            if row < self.rightListWidget.count() - 1:
                self.rightListWidget.takeItem(row)
                self.rightListWidget.insertItem(row + 1, item)
                self.rightListWidget.setCurrentItem(item)
                
    def sort_left_PDF_by_name(self):
        self.leftListWidget.sortItems(Qt.AscendingOrder if self.left_sort_ascending else Qt.DescendingOrder)
        self.left_sort_ascending = not self.left_sort_ascending

    def sort_right_PDF_by_name(self):
        self.rightListWidget.sortItems(Qt.AscendingOrder if self.right_sort_ascending else Qt.DescendingOrder)
        self.right_sort_ascending = not self.right_sort_ascending


    def merge_PDF(self):
        left_items = [self.leftListWidget.item(i) for i in range(self.leftListWidget.count())]
        right_items = [self.rightListWidget.item(i) for i in range(self.rightListWidget.count())]

        save_dir = PDFManagement.save_path

        if not save_dir:
            save_dir = QFileDialog.getExistingDirectory(self, "저장 폴더 선택")

        if save_dir:
            PDFManagement.save_path = save_dir

            for left_item, right_item in zip(left_items, right_items):
                left_name = left_item.text()
                right_name = right_item.text()

                merged_pdf_path = os.path.join(save_dir, f"{right_name}.pdf")

                pdf_document = PdfWriter()

                left_path = self.leftListWidget.left_paths[left_name]
                left_pdf = PdfReader(open(left_path, 'rb'))
                for page_num in range(len(left_pdf.pages)):
                    pdf_document.add_page(left_pdf.pages[page_num])

                right_path = self.rightListWidget.right_paths[right_name]
                right_pdf = PdfReader(open(right_path, 'rb'))
                for page_num in range(len(right_pdf.pages)):
                    pdf_document.add_page(right_pdf.pages[page_num])

                with open(merged_pdf_path, 'wb') as merged_pdf_file:
                    pdf_document.write(merged_pdf_file)

            QMessageBox.information(self, '성공', "PDF가 성공적으로 병합되었습니다.", QMessageBox.Yes)
        else:
            QMessageBox.warning(self, '경고', "저장 경로가 지정되지 않았습니다.", QMessageBox.Yes)


        
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        
    def initUI(self):
        self.setupMenuBar()
        self.setupCentralWidget()
        self.setMinimumSize(500, 550)  
    def setupMenuBar(self):
        menu = self.menuBar()
        menu_pdf = menu.addMenu('PDF')

        self.pdf_management = QAction('PDF 관리', self)
        menu_pdf.addAction(self.pdf_management)

        self.pdf_save_path = QAction('PDF 저장 경로 설정', self)
        menu_pdf.addAction(self.pdf_save_path)


        self.pdf_management.triggered.connect(self.show_pdf_management)
        self.pdf_save_path.triggered.connect(self.set_save_path)

    def setupCentralWidget(self):
        self.widget = MainWidget()
        self.setCentralWidget(self.widget)
        self.resize(500, 550)
        self.setWindowTitle("PDF App")
        self.setFixedSize(500, 550)
        self.show()

    def show_pdf_management(self):
        pdf_management_widget = PDFManagement()
        self.setCentralWidget(pdf_management_widget)

    def set_save_path(self):
        directory = QFileDialog.getExistingDirectory(self, "저장 폴더 선택")
        if directory:
            PDFManagement.save_path = directory


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())
